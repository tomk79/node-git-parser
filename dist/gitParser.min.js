!function t(e,n,r){function s(i,a){if(!n[i]){if(!e[i]){var d="function"==typeof require&&require;if(!a&&d)return d(i,!0);if(o)return o(i,!0);throw new Error("Cannot find module '"+i+"'")}var c=n[i]={exports:{}};e[i][0].call(c.exports,function(t){var n=e[i][1][t];return s(n?n:t)},c,c.exports,t,e,n,r)}return n[i].exports}for(var o="function"==typeof require&&require,i=0;i<r.length;i++)s(r[i]);return s}({1:[function(t,e,n){e.exports=function(t){var e=this;t=t||function(t){(t=t||function(){})(0,"")},this.git=function(n,r){t(n,function(t,s){e.parse(n,t,s,r)})},this.parse=function(t,n,r,s){var o={code:n,stdout:r,errors:[]};if(r.match(/^fatal\:\ ([\s\S]*)$/g))return o.errors.push(RegExp.$1),void s(o);switch(o.stdout.match(/^git\:\ (\'([\s\S]*?)\'\ is\ not\ a\ git\ command\.)/g)?o.errors.push(RegExp.$1):0!==o.code&&o.errors.push(o.stdout),t[0]){case"init":case"status":case"add":case"commit":case"branch":case"checkout":e[t[0]](o,function(t){s(t)});break;default:s(o)}}},e.exports.prototype.init=t("./parsers/init.js"),e.exports.prototype.status=t("./parsers/status.js"),e.exports.prototype.add=t("./parsers/add.js"),e.exports.prototype.commit=t("./parsers/commit.js"),e.exports.prototype.branch=t("./parsers/branch.js"),e.exports.prototype.checkout=t("./parsers/checkout.js")},{"./parsers/add.js":2,"./parsers/branch.js":3,"./parsers/checkout.js":4,"./parsers/commit.js":5,"./parsers/init.js":6,"./parsers/status.js":7}],2:[function(t,e,n){e.exports=function(t,e){e=e||function(){};var n=t.stdout.split(/\r\n|\r|\n/g);return t.stdout.length?(t.added=[],t.removed=[],n.forEach(function(e){e.match(/^add\ \'([\s\S]*)\'$/g)?t.added.push(RegExp.$1):e.match(/^remove\ \'([\s\S]*)\'$/g)&&t.removed.push(RegExp.$1)}),void e(t)):void e(t)}},{}],3:[function(t,e,n){e.exports=function(t,e){e=e||function(){};var n=t.stdout.split(/\r\n|\r|\n/g);t.branches=[],n.forEach(function(e){if(e.length&&e.match(/^(\*?)[\s]*([\S]*)$/g)){var n=RegExp.$2;t.branches.push(n),RegExp.$1&&(t.currentBranchName=n)}}),e(t)}},{}],4:[function(t,e,n){e.exports=function(t,e){(e=e||function(){})(t)}},{}],5:[function(t,e,n){e.exports=function(t,e){(e=e||function(){})(t)}},{}],6:[function(t,e,n){e.exports=function(t,e){(e=e||function(){})(t)}},{}],7:[function(t,e,n){e.exports=function(t,e){e=e||function(){};var n=t.stdout.split(/\r\n|\r|\n/g),r=null;t.staged={},t.staged.untracked=[],t.staged.modified=[],t.staged.deleted=[],t.notStaged={},t.notStaged.untracked=[],t.notStaged.modified=[],t.notStaged.deleted=[],n.forEach(function(e){if(r||e.match(/^On\ branch\ ([\s\S]*)$/g)&&(t.currentBranchName=RegExp.$1),"Untracked files:"==e)return void(r="untracked_files_standby");if("untracked_files_standby"==r){if(!e.length)return void(r="untracked_files")}else if("untracked_files"==r){if(!e.length)return void(r=null);if(e.match(/^[\s]*([\s\S]*?)$/g))return void t.notStaged.untracked.push(RegExp.$1)}if("Changes not staged for commit:"==e)return void(r="changes_not_staged_for_commit_standby");if("changes_not_staged_for_commit_standby"==r){if(!e.length)return void(r="changes_not_staged_for_commit")}else if("changes_not_staged_for_commit"==r){if(!e.length)return void(r=null);if(e.match(/^[\s]*modified\:[\s]+([\s\S]*?)$/g))return void t.notStaged.modified.push(RegExp.$1);if(e.match(/^[\s]*deleted\:[\s]+([\s\S]*?)$/g))return void t.notStaged.deleted.push(RegExp.$1)}if("Changes to be committed:"==e)return void(r="changes_to_be_committed_standby");if("changes_to_be_committed_standby"==r){if(!e.length)return void(r="changes_to_be_committed")}else if("changes_to_be_committed"==r){if(!e.length)return void(r=null);if(e.match(/^[\s]*new\ file\:[\s]+([\s\S]*?)$/g))return void t.staged.untracked.push(RegExp.$1);if(e.match(/^[\s]*modified\:[\s]+([\s\S]*?)$/g))return void t.staged.modified.push(RegExp.$1);if(e.match(/^[\s]*deleted\:[\s]+([\s\S]*?)$/g))return void t.staged.deleted.push(RegExp.$1)}}),e(t)}},{}],8:[function(t,e,n){window.GitParser=t("../libs/main.js")},{"../libs/main.js":1}]},{},[8]);