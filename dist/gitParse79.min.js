!function t(e,r,s){function n(i,a){if(!r[i]){if(!e[i]){var c="function"==typeof require&&require;if(!a&&c)return c(i,!0);if(o)return o(i,!0);throw new Error("Cannot find module '"+i+"'")}var u=r[i]={exports:{}};e[i][0].call(u.exports,function(t){var r=e[i][1][t];return n(r?r:t)},u,u.exports,t,e,r,s)}return r[i].exports}for(var o="function"==typeof require&&require,i=0;i<s.length;i++)n(s[i]);return n}({1:[function(t,e,r){e.exports=function(t){var e=this;t=t||function(t){(t=t||function(){})(0,"")},this.git=function(r,s){t(r,function(t,n){e.parse(r,t,n,s)})},this.parse=function(t,r,s,n){var o={code:r,stdout:s,errors:[]};if(s.match(/^fatal\:\ ([\s\S]*)$/g))return o.errors.push(RegExp.$1),void n(o);switch(o.stdout.match(/^git\:\ (\'([\s\S]*?)\'\ is\ not\ a\ git\ command\.)/g)?o.errors.push(RegExp.$1):0!==o.code&&o.errors.push(o.stdout),t[0]){case"init":case"config":case"status":case"add":case"commit":case"branch":case"checkout":case"log":e[t[0]](t,o,function(t){n(t)});break;default:n(o)}}},e.exports.prototype.init=t("./parsers/init.js"),e.exports.prototype.config=t("./parsers/config.js"),e.exports.prototype.status=t("./parsers/status.js"),e.exports.prototype.add=t("./parsers/add.js"),e.exports.prototype.commit=t("./parsers/commit.js"),e.exports.prototype.branch=t("./parsers/branch.js"),e.exports.prototype.checkout=t("./parsers/checkout.js"),e.exports.prototype.log=t("./parsers/log.js"),e.exports.prototype.parseCmdAry=function(t){var e={options:{},args:[]};return t.forEach(function(t,r){if(r){if(t.match(/^\-\-?([a-zA-Z\-\/.]+?)(?:\=([a-zA-Z\-\/.]+))?$/)){var s=RegExp.$1,n=RegExp.$2;return e.options[s]=!0,void(n&&(e.options[s]=n))}e.args.push(t)}}),e}},{"./parsers/add.js":2,"./parsers/branch.js":3,"./parsers/checkout.js":4,"./parsers/commit.js":5,"./parsers/config.js":6,"./parsers/init.js":7,"./parsers/log.js":8,"./parsers/status.js":9}],2:[function(t,e,r){e.exports=function(t,e,r){r=r||function(){};var s=e.stdout.split(/\r\n|\r|\n/g);return e.stdout.length?(e.added=[],e.removed=[],s.forEach(function(t){t.match(/^add\ \'([\s\S]*)\'$/g)?e.added.push(RegExp.$1):t.match(/^remove\ \'([\s\S]*)\'$/g)&&e.removed.push(RegExp.$1)}),void r(e)):void r(e)}},{}],3:[function(t,e,r){e.exports=function(t,e,r){r=r||function(){};var s=e.stdout.split(/\r\n|\r|\n/g);e.branches=[],s.forEach(function(t){if(t.length&&t.match(/^(\*?)[\s]*([\S]*)$/g)){var r=RegExp.$2;e.branches.push(r),RegExp.$1&&(e.currentBranchName=r)}}),r(e)}},{}],4:[function(t,e,r){e.exports=function(t,e,r){r=r||function(){};var s=e.stdout.split(/\r\n|\r|\n/g);e.result=!1,e.created=!1,s.forEach(function(t){if(t.length&&t.match(/^Switched\ to\ (a\ new\ )?branch \'([\S]*?)\'$/g)){var r=RegExp.$2;e.currentBranchName=r,RegExp.$1&&(e.created=!0),e.result=!0}}),r(e)}},{}],5:[function(t,e,r){e.exports=function(t,e,r){(r=r||function(){})(e)}},{}],6:[function(t,e,r){e.exports=function(t,e,r){r=r||function(){};var s=e.stdout.split(/\r\n|\r|\n/g),n=null,o=this.parseCmdAry(t);if(e.property=o.args[0],n=1==o.args.length?"get":"set","get"==n)switch(e.property){case"user.name":e.name=s[0];break;case"user.email":e.email=s[0]}r(e)}},{}],7:[function(t,e,r){e.exports=function(t,e,r){(r=r||function(){})(e)}},{}],8:[function(t,e,r){function s(t){var e=[];return t.forEach(function(t){e.push(t)}),e}e.exports=function(t,e,r){r=r||function(){};var n=e.stdout.split(/\r\n|\r|\n/g),o=null;e.logs=[];var i,a,c=this.parseCmdAry(t);n.forEach(function(t){if(t.match(/^commit\ ([0-9a-fA-F]+)$/))return i={},i.commit=RegExp.$1,void(o="log_header");if("log_header"!=o){if("log_commit_message"==o){if(!t.length)return c.options.p?(o="log_commit_files",void(a=[])):(o=null,e.logs.push(i),void(i={}));if(t.match(/^\s{4}([\s\S]*?)$/g))return void(i.message+=RegExp.$1+"\n")}else if("log_commit_files"==o)return t.length?void a.push(t):(o=null,i.files=s(a),e.logs.push(i),void(i={}))}else{if(!t.length)return o="log_commit_message",void(i.message="");if(t.match(/^Author\:\s+([\s\S]+?)\s+\<([\S]+?)\>$/g))return i.author=RegExp.$1,void(i.email=RegExp.$2)}}),r(e)}},{}],9:[function(t,e,r){e.exports=function(t,e,r){r=r||function(){};var s=e.stdout.split(/\r\n|\r|\n/g),n=null;e.staged={},e.staged.untracked=[],e.staged.modified=[],e.staged.deleted=[],e.notStaged={},e.notStaged.untracked=[],e.notStaged.modified=[],e.notStaged.deleted=[],s.forEach(function(t){if(n||t.match(/^On\ branch\ ([\s\S]*)$/g)&&(e.currentBranchName=RegExp.$1),"Untracked files:"==t)return void(n="untracked_files_standby");if("untracked_files_standby"==n){if(!t.length)return void(n="untracked_files")}else if("untracked_files"==n){if(!t.length)return void(n=null);if(t.match(/^[\s]*([\s\S]*?)$/g))return void e.notStaged.untracked.push(RegExp.$1)}if("Changes not staged for commit:"==t)return void(n="changes_not_staged_for_commit_standby");if("changes_not_staged_for_commit_standby"==n){if(!t.length)return void(n="changes_not_staged_for_commit")}else if("changes_not_staged_for_commit"==n){if(!t.length)return void(n=null);if(t.match(/^[\s]*modified\:[\s]+([\s\S]*?)$/g))return void e.notStaged.modified.push(RegExp.$1);if(t.match(/^[\s]*deleted\:[\s]+([\s\S]*?)$/g))return void e.notStaged.deleted.push(RegExp.$1)}if("Changes to be committed:"==t)return void(n="changes_to_be_committed_standby");if("changes_to_be_committed_standby"==n){if(!t.length)return void(n="changes_to_be_committed")}else if("changes_to_be_committed"==n){if(!t.length)return void(n=null);if(t.match(/^[\s]*new\ file\:[\s]+([\s\S]*?)$/g))return void e.staged.untracked.push(RegExp.$1);if(t.match(/^[\s]*modified\:[\s]+([\s\S]*?)$/g))return void e.staged.modified.push(RegExp.$1);if(t.match(/^[\s]*deleted\:[\s]+([\s\S]*?)$/g))return void e.staged.deleted.push(RegExp.$1)}}),r(e)}},{}],10:[function(t,e,r){window.GitParser=t("../libs/main.js")},{"../libs/main.js":1}]},{},[10]);